import os
from typing import Callable, Any, Dict, Awaitable

from utils import calculate_requirements, get_food_info, create_progress_chart,\
      setup_logging, log, ValueOutOfRangeError

from aiogram import Bot
from aiogram import Dispatcher
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import BaseMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import asyncio


# os.chdir('app')

load_dotenv()
setup_logging()

telegram_token = os.environ.get("ACTIVITY_BOT_TOKEN")
calories_token = os.environ.get("CALORIES_TOKEN")
bot = Bot(token=telegram_token)

dp = Dispatcher()
router = Router()

users = {}


class Form(StatesGroup):
    weight = State()
    height = State()
    sex = State()
    age = State()
    activity = State()
    calories = State()
    city = State()


class WorkoutState(StatesGroup):
    workout_type = State()
    duration = State()


class CounterMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        self.counter = 0

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        
        user_id = event.from_user.id
        message_text = event.text

        log('info', 'User: {}. Message: {}', user_id, message_text)

        return await handler(event, data)

dp.message.middleware(CounterMiddleware())


@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! üí¶üî•
    
–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–∏—Ç–∞–Ω–∏—é!
    
–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –î–ª—è –Ω–∞—á–∞–ª–∞, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/set_profile üë§ - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/delete_profile ‚ùå - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/log_water üíß - –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É
/log_food üçî - –ó–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É
/log_workout üèÉ‚Äç‚ôÇÔ∏è - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/check_progress üìä - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    
    await message.reply(text)


@dp.message(Command("help"))
async def help(message: Message):

    text = f"""
    –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/set_profile üë§ - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/delete_profile ‚ùå - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/log_water üíß - –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É
/log_food üçî - –ó–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É
/log_workout üèÉ‚Äç‚ôÇÔ∏è - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/check_progress üìä - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """

    await message.reply(text)


@dp.message(Command('delete_profile'))
async def delete_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id in users:
        del users[user_id]
        log('info', 'Profile deleted for user {}', user_id)
        await message.reply('–ü—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω')
    else:
        log('info', 'Profile not found for user {}', user_id)
        await message.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message(Command('set_profile'))
async def set_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in users:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
        await state.set_state(Form.weight)
    else:
        await message.reply('–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ '
                            '–ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_profile')
        return None


@dp.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    min_weight = 15
    max_weight = 200

    try:
        weight = int(message.text)

        if not min_weight <= weight <= max_weight:
            raise ValueOutOfRangeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                                       weight, min_weight, max_weight)
        
        await state.update_data(weight=weight)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(Form.height)

    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except ValueOutOfRangeError as e:
        await message.answer(str(e))


@dp.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    min_height = 140
    max_height = 250

    try:
        height = int(message.text)

        if not min_height <= height <= max_height:
            raise ValueOutOfRangeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                                       height, min_height, max_height)
        
        await state.update_data(height=height)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª:")
        await state.set_state(Form.sex)

    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except ValueOutOfRangeError as e:
        await message.answer(str(e))


@dp.message(Form.sex)
async def process_sex(message: Message, state: FSMContext):
    sex = message.text.lower().strip()

    if sex != '–∂–µ–Ω' and sex != '–º—É–∂':
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ª –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è '–º—É–∂' –∏ '–∂–µ–Ω'. "
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return None
    else:
        await state.update_data(sex=sex)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(Form.age)


@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    min_age = 18
    max_age = 120

    try:
        age = int(message.text)

        if not min_age <= age <= max_age:
            raise ValueOutOfRangeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                                       age, min_age, max_age)

        await state.update_data(age=age)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(Form.activity)

    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except ValueOutOfRangeError as e:
        await message.answer(str(e))


@dp.message(Form.activity)
async def process_activity(message: Message, state: FSMContext):
    min_activity = 0
    max_activity = 3600

    try:
        activity = int(message.text)

        if not min_activity <= activity <= max_activity:
            raise ValueOutOfRangeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                                       activity, min_activity, max_activity)

        await state.update_data(activity=activity)
        await message.reply("–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º? –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞, —Ç–æ —É–∫–∞–∂–∏—Ç–µ 0")
        await state.set_state(Form.calories)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except ValueOutOfRangeError as e:
        await message.answer(str(e))


@dp.message(Form.calories)
async def process_calories(message: Message, state: FSMContext):
    min_calories = 0
    max_calories = 10000

    try:
        calories = int(message.text)

        if not min_calories <= calories <= max_calories:
            raise ValueOutOfRangeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª–æ—Ä–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                                       calories, min_calories, max_calories)

        await state.update_data(calories=calories)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(Form.city)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except ValueOutOfRangeError as e:
        await message.answer(str(e))


@dp.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    user_id = message.from_user.id
    city = message.text
    await state.update_data(city=city)

    user_data = await state.get_data()
    users[user_id] = {**user_data}
    
    water_goal, calorie_goal, fat_goal, protein_goal, carbohydrates_goal = calculate_requirements(
        user_data['weight'], user_data['height'], user_data['age'],
        user_data['activity'], user_data['city'], user_data['sex']
        )
    
    calorie_goal = calorie_goal if user_data['calories'] == 0 else user_data['calories']
    
    users[user_id]['water_goal'] = water_goal
    users[user_id]['calorie_goal'] = calorie_goal
    users[user_id]['fat_goal'] = fat_goal
    users[user_id]['protein_goal'] = protein_goal
    users[user_id]['carbohydrates_goal'] = carbohydrates_goal
    
    await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–∞—à–∏ —Ü–µ–ª–∏:\n- –í–æ–¥–∞: {water_goal} –º–ª"
                        f"\n- –ö–∞–ª–æ—Ä–∏–∏: {calorie_goal} –∫–∫–∞–ª\n- –ë–µ–ª–∫–∏: {protein_goal} –≥"
                        f"\n- –ñ–∏—Ä—ã: {fat_goal} –≥\n - –£–≥–ª–µ–≤–æ–¥—ã: {carbohydrates_goal} –≥"
                        )
    await state.clear()


@dp.message(Command('log_water'))
async def log_water(message: Message):
    user_id = message.from_user.id

    if user_id in users:
        try:
            amount = int(message.text.replace('/log_water ', '').strip())
        except ValueError:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_water <–æ–±—ä–µ–º –≤ –º–ª>")
            return
            
        users[user_id]['logged_water'] = users.get(user_id, {}).get('logged_water', 0) + amount
        remaining = users[user_id]['water_goal'] - users[user_id]['logged_water']

        if remaining > 0:
            text = f"–í—ã–ø–∏—Ç–æ: {amount} –º–ª.\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª."
        else:
            text = f"–í—ã–ø–∏—Ç–æ: {amount} –º–ª.\n–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ‚úÖ"

        await message.reply(text)
    
    else:
        await message.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å '
                            '—Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile')


@dp.message(Command('log_food'))
async def log_food(message: Message):
    user_id = message.from_user.id

    if user_id in users:
        message_text = message.text.replace('/log_food ', '').split()

        if len(message_text) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö>")
            return
        
        food_gram = message_text[-1]
        food_name = ' '.join(message_text[:-1])

        try:
            food_gram = int(food_gram)
        except ValueError:
            await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n'
                                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö>')
            return
        
        food_data = await get_food_info(food_name, calories_token)

        if food_data:
            food_data = food_data.get('items', [])
            
            calories_per_size = int(food_data[0].get('calories', 0) / 100 * food_gram)
            fat_per_size = int(food_data[0].get('fat_total_g', 0) / 100 * food_gram)
            protein_per_size = int(food_data[0].get('protein_g', 0) / 100 * food_gram)
            carbohydrates_per_size = int(food_data[0].get('carbohydrates_total_g', 0) / 100 * food_gram)
        else:
            await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è '{food_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ")
            return

        users[user_id]['logged_calories'] = users.get(user_id, {}).get('logged_calories', 0) + calories_per_size
        users[user_id]['logged_fat'] = users.get(user_id, {}).get('logged_fat', 0) + fat_per_size
        users[user_id]['logged_protein'] = users.get(user_id, {}).get('logged_protein', 0) + protein_per_size
        users[user_id]['logged_carbohydrates'] = users.get(user_id, {}).get('logged_carbohydrates', 0) + carbohydrates_per_size
        
        remaining = users[user_id]['calorie_goal'] - users[user_id]['logged_calories']

        text = f"–ï–¥–∞: {food_name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {food_gram} –≥.\n"\
        f"- {calories_per_size} –∫–∫–∞–ª\n"\
        f"- {fat_per_size} –≥. –∂–∏—Ä–æ–≤\n"\
        f"- {protein_per_size} –≥. –±–µ–ª–∫–æ–≤\n"\
        f"- {carbohydrates_per_size} –≥. —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"

        text += f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} –∫–∫–∞–ª" if remaining > 0 else "–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ‚úÖ"

        await message.reply(text)
    
    else:
        await message.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile')


@dp.message(Command('log_workout'))
async def log_workout_keyboard(message: Message):
    user_id = message.from_user.id

    if user_id in users:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ë–µ–≥", callback_data="–ë–µ–≥"),
             InlineKeyboardButton(text="–í–µ–ª–æ—Å–∏–ø–µ–¥", callback_data="–í–µ–ª–æ—Å–∏–ø–µ–¥")
             ],
             [InlineKeyboardButton(text="–ô–æ–≥–∞", callback_data="–ô–æ–≥–∞"),
              InlineKeyboardButton(text="–¢–∞–Ω—Ü—ã", callback_data="–¢–∞–Ω—Ü—ã")
              ],
             [InlineKeyboardButton(text="–ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="–ü–ª–∞–≤–∞–Ω–∏–µ"),
              InlineKeyboardButton(text="–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª", callback_data="–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª")
              ],
              [InlineKeyboardButton(text="–§–∏–≥—É—Ä–Ω–æ–µ –∫–∞—Ç–∞–Ω–∏–µ", callback_data="–§–∏–≥—É—Ä–Ω–æ–µ –∫–∞—Ç–∞–Ω–∏–µ"),
              InlineKeyboardButton(text="–õ—ã–∂–∏", callback_data="–õ—ã–∂–∏")
              ],
              [InlineKeyboardButton(text="–ë–æ–∫—Å", callback_data="–ë–æ–∫—Å"),
              InlineKeyboardButton(text="–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", callback_data="–ë–∞–¥–º–∏–Ω—Ç–æ–Ω")
              ],
              [InlineKeyboardButton(text="–ë–æ—É–ª–∏–Ω–≥", callback_data="–ë–æ—É–ª–∏–Ω–≥"),
              InlineKeyboardButton(text="–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å", callback_data="–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å")
              ],
              [InlineKeyboardButton(text="–§—É—Ç–±–æ–ª", callback_data="–§—É—Ç–±–æ–ª"),
              InlineKeyboardButton(text="–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", callback_data="–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å")],
              [InlineKeyboardButton(text="–í–æ–ª–ª–µ–π–±–æ–ª", callback_data="–í–æ–ª–ª–µ–π–±–æ–ª")]
              ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)

    else:
        await message.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile')


@dp.callback_query(lambda c:c.data in ["–ë–µ–≥", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–ô–æ–≥–∞", "–¢–∞–Ω—Ü—ã", "–ü–ª–∞–≤–∞–Ω–∏–µ", "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª", "–§–∏–≥—É—Ä–Ω–æ–µ –∫–∞—Ç–∞–Ω–∏–µ", "–õ—ã–∂–∏", "–ë–æ–∫—Å", "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", "–ë–æ—É–ª–∏–Ω–≥", "–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å", "–§—É—Ç–±–æ–ª", "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", "–í–æ–ª–ª–µ–π–±–æ–ª"])
async def log_workout(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in users:
        await callback_query.answer()
        await state.update_data(workout_type=callback_query.data)
        log('info', 'User {} chose {}', callback_query.from_user.id, callback_query.data)
        
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:")
        await state.set_state(WorkoutState.duration)
    else:
        await callback_query.message.answer('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile')


@dp.message(WorkoutState.duration)
async def process_duration(message: Message, state: FSMContext):
    workout_calories = {
        "–ë–µ–≥": 10,
        "–í–µ–ª–æ—Å–∏–ø–µ–¥": 5.3,
        "–ô–æ–≥–∞": 3.75,
        "–¢–∞–Ω—Ü—ã": 6.7,
        "–ü–ª–∞–≤–∞–Ω–∏–µ": 3.83,
        "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª": 11,
        "–§–∏–≥—É—Ä–Ω–æ–µ –∫–∞—Ç–∞–Ω–∏–µ": 5,
        "–õ—ã–∂–∏": 8.1,
        "–ë–æ–∫—Å": 14.2,
        "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω": 6.75,
        "–ë–æ—É–ª–∏–Ω–≥": 4.5,
        "–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å": 6.7,
        "–§—É—Ç–±–æ–ª": 7.5,
        "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å": 5.25,
        "–í–æ–ª–ª–µ–π–±–æ–ª": 4.25
    }

    user_id = message.from_user.id

    min_duration = 0
    max_duration = 3600

    try:
        duration = int(message.text)

        if not min_duration <= duration <= max_duration:
            raise ValueOutOfRangeError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                                       duration, min_duration, max_duration)

        await state.update_data(duration=duration)
        workout_data = await state.get_data()

        workout_type = workout_data['workout_type']
        training_min = workout_data['duration']

        calories_burned = int(training_min * workout_calories[workout_type])
        
        users[user_id]['burned_calories'] = users.get(user_id, {}).get('burned_calories', 0) + calories_burned
        users[user_id]['trained_time'] = users.get(user_id, {}).get('trained_time', 0) + training_min

        training_extra_time = users[user_id]['trained_time'] - users[user_id]['activity']
        text = f"{workout_type} {training_min} –º–∏–Ω—É—Ç ‚Äî {calories_burned} –∫–∫–∞–ª"

        if training_extra_time > 0:
            additional_water = 7 * training_extra_time
            users[user_id]['additional_water'] = additional_water
            text += f". –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {additional_water} –º–ª –≤–æ–¥—ã."
        
        await message.reply(text)
        await state.clear()

    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except ValueOutOfRangeError as e:
        await message.answer(str(e))


@dp.message(Command('check_progress'))
async def check_progress(message: Message):
    user_id = message.from_user.id
    
    if user_id in users:
        user_progress = users[user_id]

        water_left = user_progress['water_goal']+user_progress.get('additional_water', 0)-user_progress.get('logged_water', 0)
        water_left_title = '–û—Å—Ç–∞–ª–æ—Å—å:' if water_left > 0 else '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:'

        calories_left  = user_progress['calorie_goal']+user_progress.get('burned_calories', 0)-user_progress.get('logged_calories', 0)
        calories_left_title = '–û—Å—Ç–∞–ª–æ—Å—å:' if calories_left > 0 else '–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:'

        progress_msg = (f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                        "üíß –í–æ–¥–∞:"
                        f"\n- –í—ã–ø–∏—Ç–æ: {user_progress.get('logged_water', 0)} –º–ª –∏–∑ {user_progress['water_goal']} –º–ª\n"
                        f"- –ë–∞–ª–∞–Ω—Å: {user_progress.get('logged_water', 0)} –º–ª –∏–∑ {user_progress['water_goal'] + user_progress.get('additional_water', 0)} –º–ª\n"
                        f"- {water_left_title} {abs(water_left)} –º–ª\n\n"
                        "üî• –ö–∞–ª–æ—Ä–∏–∏:"
                        f"\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_progress.get('logged_calories', 0)} –∫–∫–∞–ª –∏–∑ {user_progress['calorie_goal']} –∫–∫–∞–ª"
                        f"\n- –°–æ–∂–∂–µ–Ω–æ: {user_progress.get('burned_calories', 0)} –∫–∫–∞–ª"
                        f"\n- –ë–∞–ª–∞–Ω—Å: {user_progress.get('logged_calories', 0)} –∫–∫–∞–ª –∏–∑ {user_progress['calorie_goal']+user_progress.get('burned_calories', 0)} –∫–∫–∞–ª"
                        f"\n- {calories_left_title} {abs(calories_left)} –∫–∫–∞–ª\n\n"
                        "üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"
                        f"\n- {user_progress.get('trained_time', 0)} –º–∏–Ω –∏–∑ {user_progress.get('activity', 0)} –º–∏–Ω\n\n"
                        "ü•ó –ë–ñ–£:"
                        f"\n- –ë–µ–ª–∫–∏: {user_progress.get('logged_protein', 0)} –≥ –∏–∑ {user_progress.get('protein_goal', 0)} –≥"
                        f"\n- –ñ–∏—Ä—ã: {user_progress.get('logged_fat', 0)} –≥ –∏–∑ {user_progress.get('fat_goal', 0)} –≥"
                        f"\n- –£–≥–ª–µ–≤–æ–¥—ã: {user_progress.get('logged_carbohydrates', 0)} –≥ –∏–∑ {user_progress.get('carbohydrates_goal', 0)} –≥")
        await message.reply(progress_msg)
    
        create_progress_chart(user_id, users[user_id])

        await message.answer_photo(
            FSInputFile(path=f'plots/{user_id}_progress.png')
            )
    
    else:
        await message.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile')


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
